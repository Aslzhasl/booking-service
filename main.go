package main

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/joho/godotenv"

	"booking-service/internal/config"
	"booking-service/internal/handler"
	"booking-service/internal/middleware"
	"booking-service/internal/repository"
	"booking-service/internal/service"

	"github.com/go-chi/chi/v5"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

func main() {
	// 1. –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–∑–∏–º .env, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω—É—Ç—Ä–∏ LoadConfig()
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: .env file not found or could not be loaded, relying on real environment variables")
	}

	// 2. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–æ–Ω–∞ —á–∏—Ç–∞–µ—Ç –∏–∑ os.Getenv)
	cfg := config.LoadConfig()

	// 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Postgres
	dbConnStr := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName, cfg.DBSSLMode,
	)
	db, err := sqlx.Connect("postgres", dbConnStr)
	if err != nil {
		log.Fatalf("Failed to connect to Postgres: %v", err)
	}
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(5)
	db.SetConnMaxLifetime(5 * time.Minute)
	log.Println("‚úÖ Connected to Postgres")

	// 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—ë–≤: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ‚Üí —Å–µ—Ä–≤–∏—Å ‚Üí handler
	bookingRepo := repository.NewBookingRepository(db)
	bookingSvc := service.NewBookingService(
		bookingRepo,
		cfg.UserServiceURL,
		cfg.ListingServiceURL,
	)
	bookingHandler := handler.NewBookingHandler(bookingSvc)

	// 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä chi
	r := chi.NewRouter()

	// 6. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º /bookings* –≤ JWT-middleware
	r.Group(func(r chi.Router) {
		r.Use(func(next http.Handler) http.Handler {
			return middleware.JWTAuthMiddleware(next, cfg.JWTSecret)
		})
		bookingHandler.RegisterRoutes(r)
	})

	// 7. –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`{"status":"ok"}`))
	})

	// 8. –í—ã–≤–æ–¥–∏–º, –Ω–∞ –∫–∞–∫–æ–º –ø–æ—Ä—Ç—É —Å–ª—É—à–∞–µ–º, –∏ –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	addr := ":" + cfg.HTTPPort
	log.Printf("üöÄ Booking service is running on %s", addr)
	if err := http.ListenAndServe(addr, r); err != nil {
		log.Fatalf("HTTP server error: %v", err)
	}
}
